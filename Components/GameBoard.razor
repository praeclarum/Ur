@using Ur.Data;
@inject Ur.Data.GameRepo repo;

<center>
    <div class="playerscores">
        <PlayerScore Game=@Game Player=@Game.Players[0] />
        <PlayerScore Game=@Game Player=@Game.Players[1] />
    </div>
<div class="gameboard"
     style="width:@(gameBoardWidth)px;height:@(gameBoardHeight)px"
     >
    @foreach (var tile in tiles) {
        <div class="tile @(tile.Rosette?"rosette":"")" 
            style="left:@(tileSize*tile.Column)px;top:@(tileSize*tile.Row)px;height:@(tileSize)px;width:@(tileSize)px"
            >@tile.Column, @tile.Row<br/>@tile.GetProgress()</div> 
    }
    @foreach (var piece in Game.Pieces) {
        if (piece.IsOut) continue;
        <div class="piece piece-@(piece.Color)" 
             style="left:@(tileSize*piece.Position.Column)px;top:@(tileSize*piece.Position.Row)px;height:@(tileSize)px;width:@(tileSize)px"
             @onclick=@(x => HandleClickedPiece(piece))>&nbsp;</div> 
    }
</div>
</center>

@code {
    [Parameter]
    public Game Game { get; set; }

    class Tile : ITilePosition {
        public int Column { get; set; }
        public int Row { get; set; }
        public bool Rosette;
    }

    private int currentCount = 0;

    int tileSize = 80;
    int gameBoardWidth => 5 * tileSize;
    int gameBoardHeight => 8 * tileSize;

    private Tile[] tiles = {
        new Tile { Column = 1, Row = 0 },
        new Tile { Column = 2, Row = 0 },
        new Tile { Column = 3, Row = 0 },
        new Tile { Column = 1, Row = 1, Rosette = true },
        new Tile { Column = 2, Row = 1 },
        new Tile { Column = 3, Row = 1, Rosette = true },
        new Tile { Column = 2, Row = 2 },
        new Tile { Column = 2, Row = 3 },
        new Tile { Column = 1, Row = 4 },
        new Tile { Column = 2, Row = 4, Rosette = true  },
        new Tile { Column = 3, Row = 4 },
        new Tile { Column = 1, Row = 5 },
        new Tile { Column = 2, Row = 5 },
        new Tile { Column = 3, Row = 5 },
        new Tile { Column = 1, Row = 6 },
        new Tile { Column = 2, Row = 6 },
        new Tile { Column = 3, Row = 6 },
        new Tile { Column = 1, Row = 7, Rosette = true  },
        new Tile { Column = 2, Row = 7 },
        new Tile { Column = 3, Row = 7, Rosette = true  },
    };


    private void IncrementCount()
    {
        currentCount++;
    }

    private async void HandleClickedPiece(GamePiece piece)
    {
        await Game.MovePieceAsync(piece);
    }

    protected override Task OnAfterRenderAsync (bool firstRender)
    {
        if (firstRender) {
            Game.PropertyChanged += async (sender, args) =>
            {
                await InvokeAsync(StateHasChanged);
            };
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}